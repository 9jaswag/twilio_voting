<!DOCTYPE html>
<html>

<head>
  <title><%= title %></title>
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
  <link rel="stylesheet" href="/stylesheets/style.css" />
</head>

<body>
  <div class="container">
    <h1 class="header">Vote for your favourite global sport.</h1>
    <main class="main-wrapper">
      <div class="nominees">
        <form>
          <div class="form-group">
            <label for="basketball" class="wrapper">
              Basketball
              <input type="radio" name="vote" id="basketball" required />
              <span class="checkmark"></span>
            </label>
          </div>
          <div class="form-group">
            <label for="cricket" class="wrapper">
              Cricket
              <input type="radio" name="vote" id="cricket" required />
              <span class="checkmark"></span>
            </label>
          </div>
          <div class="form-group">
            <label for="football" class="wrapper">
              Football
              <input type="radio" name="vote" id="football" required />
              <span class="checkmark"></span>
            </label>
          </div>
          <input type="hidden" name="token" value="<%= token %>" />

          <div class="form-group">
            <button type="submit">Vote</button>
          </div>
        </form>
      </div>
      <div class="chart">
        <canvas id="voteChart" width="400" height="400"></canvas>
      </div>
    </main>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.3/dist/Chart.min.js"></script>
  <script type="text/javascript" src="//media.twiliocdn.com/sdk/js/sync/v0.12/twilio-sync.min.js"></script>

  <script>
    // connect to Sync Service
    let syncClient;
    const token = document.querySelector("input[type=hidden]").value;

    syncClient = new Twilio.Sync.Client(token, { logLevel: "info" });
    syncClient.on("connectionStateChanged", function (state) {
      if (state != "connected") {
        console.log(`not connected: ${state}`);
      } else {
        console.log("connected");
      }
    });

    // create vote chart class
    class VoteChart {
      static chartData = [0, 0, 0];

      /*
      method to render chart
      */
      static renderChart() {
        let context = document.getElementById("voteChart").getContext("2d");
        let chart = new Chart(context, {
          type: "bar",
          data: {
            labels: ["Basketball", "Cricket", "Football"],
            datasets: [
              {
                label: "# of Votes",
                data: VoteChart.chartData,
                backgroundColor: [
                  "rgba(255, 99, 132, 0.2)",
                  "rgba(54, 162, 235, 0.2)",
                  "rgba(255, 206, 86, 0.2)"
                ],
                borderColor: [
                  "rgba(255, 99, 132, 1)",
                  "rgba(54, 162, 235, 1)",
                  "rgba(255, 206, 86, 1)"
                ],
                borderWidth: 1
              }
            ]
          },
          options: {
            scales: {
              yAxes: [
                {
                  ticks: {
                    beginAtZero: true
                  }
                }
              ]
            }
          }
        });
      }

      /*
      method to re-render chart with new values
      */
      static reRenderChart(chartData) {
        VoteChart.chartData = chartData;
        VoteChart.renderChart();
      }
    }

    VoteChart.renderChart();

    // handle form submission
    const form = document.querySelector("form");
    form.onsubmit = event => {
      event.preventDefault();
      const radioButtons = form.querySelectorAll("input[type=radio]");
      let checkedOption;

      radioButtons.forEach(button => {
        if (button.checked) {
          checkedOption = button.id;
        }
      });

      fetch("/users", {
        method: "POST",
        body: JSON.stringify({ [checkedOption]: checkedOption }),
        headers: {
          "Content-Type": "application/json"
        }
      })
        .then(response => response.json())
        .then(response => {
          console.log(response);
          updatedChartData = Object.values(response);
          VoteChart.reRenderChart(updatedChartData);
        });
    };
  </script>
</body>

</html>